// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: core/src/main/java/com/nightscout/core/model/v2/download.proto
package com.nightscout.core.model.v2;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.FLOAT;
import static com.squareup.wire.Message.Datatype.STRING;

/**
 * Next tag: 4
 */
public final class Download extends Message {
  private static final long serialVersionUID = 0L;

  public static final DownloadStatus DEFAULT_STATUS = DownloadStatus.SUCCESS;
  public static final String DEFAULT_TIMESTAMP = "";
  public static final Float DEFAULT_UPLOADER_BATTERY_PERCENT = 0F;

  @ProtoField(tag = 1, type = ENUM)
  public final DownloadStatus status;

  /**
   * ISO8601 timestamp of when the uploader initiated this download.
   */
  @ProtoField(tag = 2, type = STRING)
  public final String timestamp;

  @ProtoField(tag = 7, type = FLOAT)
  public final Float uploader_battery_percent;

  /**
   * Data from a Dexcom G4.
   */
  @ProtoField(tag = 3)
  public final G4Data g4_data;

  public Download(DownloadStatus status, String timestamp, Float uploader_battery_percent, G4Data g4_data) {
    this.status = status;
    this.timestamp = timestamp;
    this.uploader_battery_percent = uploader_battery_percent;
    this.g4_data = g4_data;
  }

  private Download(Builder builder) {
    this(builder.status, builder.timestamp, builder.uploader_battery_percent, builder.g4_data);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Download)) return false;
    Download o = (Download) other;
    return equals(status, o.status)
        && equals(timestamp, o.timestamp)
        && equals(uploader_battery_percent, o.uploader_battery_percent)
        && equals(g4_data, o.g4_data);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = status != null ? status.hashCode() : 0;
      result = result * 37 + (timestamp != null ? timestamp.hashCode() : 0);
      result = result * 37 + (uploader_battery_percent != null ? uploader_battery_percent.hashCode() : 0);
      result = result * 37 + (g4_data != null ? g4_data.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<Download> {

    public DownloadStatus status;
    public String timestamp;
    public Float uploader_battery_percent;
    public G4Data g4_data;

    public Builder() {
    }

    public Builder(Download message) {
      super(message);
      if (message == null) return;
      this.status = message.status;
      this.timestamp = message.timestamp;
      this.uploader_battery_percent = message.uploader_battery_percent;
      this.g4_data = message.g4_data;
    }

    public Builder status(DownloadStatus status) {
      this.status = status;
      return this;
    }

    /**
     * ISO8601 timestamp of when the uploader initiated this download.
     */
    public Builder timestamp(String timestamp) {
      this.timestamp = timestamp;
      return this;
    }

    public Builder uploader_battery_percent(Float uploader_battery_percent) {
      this.uploader_battery_percent = uploader_battery_percent;
      return this;
    }

    /**
     * Data from a Dexcom G4.
     */
    public Builder g4_data(G4Data g4_data) {
      this.g4_data = g4_data;
      return this;
    }

    @Override
    public Download build() {
      return new Download(this);
    }
  }
}
